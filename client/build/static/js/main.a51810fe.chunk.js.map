{"version":3,"sources":["components/Navbar.js","components/AudioControl.js","components/List.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","props","classes","AppBar","position","Toolbar","Typography","variant","className","Button","onClick","setDarkMode","darkModeOn","color","AudioControl","rap","useRef","useState","isPlaying","setPlaying","useEffect","current","audioEl","play","pause","src","fileName","ref","event","preventDefault","width","List","characters","map","character","Accordion","key","name","AccordionSummary","expandIcon","aria-label","aria-controls","id","FormControlLabel","stopPropagation","onFocus","control","label","AccordionDetails","description","searchBar","marginTop","marginBottom","listData","Home","searchTerm","setSearch","setCharacters","filter","toLowerCase","includes","Container","maxWidth","TextField","onChange","e","target","value","App","createMuiTheme","palette","type","ThemeProvider","CssBaseline","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a51810fe.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar, Typography, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\n\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    })\n});\n\nfunction Navbar(props) {\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>Voice Tracker</Typography>\n                <Button onClick={() => props.setDarkMode(!props.darkModeOn)} color=\"inherit\">\n                    {props.darkModeOn ? <Brightness7Icon /> : <Brightness4Icon />}\n                </Button>\n                <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Navbar;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@material-ui/core/\";\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport ReactAudioPlayer from \"react-audio-player\";\n\n\nfunction AudioControl(props) {\n    const rap = useRef()\n    const [isPlaying, setPlaying] = useState(false);\n\n    useEffect(() => {\n        isPlaying ? rap.current.audioEl.current.play() : rap.current.audioEl.current.pause();\n    }, [isPlaying]);\n\n    const playPause = (e) => {\n        e.preventDefault();\n        isPlaying ? setPlaying(false) : setPlaying(true);\n    }\n\n    return (\n        <>\n            <ReactAudioPlayer src={props.fileName} ref={rap} />\n            <Button onClick={(event) => playPause(event)}>\n                {isPlaying ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\n            </Button>\n        </>\n    );\n}\n\nexport default AudioControl;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Accordion, AccordionSummary, AccordionDetails, FormControlLabel } from \"@material-ui/core/\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport AudioControl from \"./AudioControl\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: \"100%\",\n    },\n});\n\nfunction List(props) {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            {props.characters.map(character => (\n                <Accordion key={character.name}>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<AudioControl fileName=\"phoebe.mp3\" />}\n                            label={character.name}\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography color=\"textSecondary\">{character.description}</Typography>\n                    </AccordionDetails>\n                </Accordion>\n            ))}\n        </div>\n    );\n}\n\nexport default List;","import React, { useState, useEffect } from \"react\";\nimport List from \"../components/List\";\nimport { TextField, Container, makeStyles } from '@material-ui/core/';\n\nconst useStyles = makeStyles((theme) => {\n    return ({\n        searchBar: {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing()\n        }\n    })\n});\n\nconst listData = [\n    {\n        name: \"Itzel Goldberger\",\n        description: \"Lives in Dracan\"\n    },\n    {\n        name: \"Roe Vask\",\n        description: \"Wandering Half-Orc\"\n    },\n    {\n        name: \"Senechal O'Brien\",\n        description: \"Badass dude\"\n    }\n];\n\n\nfunction Home() {\n\n    const [searchTerm, setSearch] = useState(\"\");\n    const [characters, setCharacters] = useState(listData);\n\n    const classes = useStyles();\n\n    const handleChange = e => setSearch(e.target.value);\n\n    useEffect(() => {\n        setCharacters(listData.filter(character => character.name.toLowerCase().includes(searchTerm.toLowerCase())));\n    }, [searchTerm]);\n\n\n    return (\n        <Container maxWidth=\"md\">\n            <TextField onChange={handleChange} value={searchTerm} className={classes.searchBar} id=\"outlined-search\" label=\"Search field\" variant=\"outlined\" />\n            <List characters={characters} />\n        </Container>\n    );\n}\n\nexport default Home;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\n\n\nfunction App() {\n  const [darkModeOn, setDarkMode] = useState(false);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: darkModeOn ? \"dark\" : \"light\"\n    }\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Navbar setDarkMode={setDarkMode} darkModeOn={darkModeOn} />\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}